@page "/"
@using Ilmhub.Spaces.Client.Models
@using Ilmhub.Spaces.Client.Interfaces
@using System.Text.RegularExpressions
@using MudBlazor
@inject IDialogService DialogService
@inject ILeadService LeadService
@inject ICourseService CourseService

<style>
    .left-strip {
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 2px;
        height: 93%;
        bottom: 0;
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px;
    }

    .scrollable-menu {
        max-height: 300px;
        overflow-y: auto;
        overflow-x: hidden;
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="pa-3">
    <MudStack Row="true" AlignItems="@AlignItems.Center" Spacing="1" Style="margin-top: -5px;">
        <MudButton Class="ma-4" Target="_blank" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add"
            Style="text-transform:none" @onclick="OpenAddLeadDialog">
            QO'SHISH
        </MudButton>
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />

        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Qidirish" Variant="Variant.Outlined"
            Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
            Immediate="true" Style="padding-left:4;"></MudTextField>

        <MudSelect style="width: 120px;" T="LeadSource?" Label="Tarmoq" Variant="Variant.Outlined" Clearable="true" Value="selectedLeadSource"
            ValueChanged="OnSourceSelected">
            <MudSelectItem T="LeadSource?" Value="null"></MudSelectItem>
            @foreach (LeadSource column in Enum.GetValues(typeof(LeadSource)))
            {
                <MudSelectItem T="LeadSource?" Value="column">
                    <MudStack Row="true">
                        <MudIcon Icon="@GetIconForSource(column)" Class="ml-1" Color="Color.Primary" Size="Size.Small" />
                        <MudText Typo="Typo.subtitle2">@column</MudText>
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>

        <MudSelect style="width: 120px;" T="Course" Label="Kurs" Variant="Variant.Outlined" Clearable="true" Value="selectedCourse"
            ValueChanged="OnCourseSelected" Class="mr-2">
            <MudSelectItem T="Course" Value="null"></MudSelectItem>
            @foreach (var course in courses)
            {
                <MudSelectItem T="Course" Value="course">
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.ChromeReaderMode" Color="Color.Primary" Class="ml-1" Size="Size.Small">
                        </MudIcon>
                        <MudText Typo="Typo.subtitle2">@course.Name</MudText>
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>
    </MudStack>
    <div class="hide-scrollbar" style="overflow-x: auto; white-space: nowrap;">
        <MudDropContainer T="Lead" @ref="dropContainer" Items="@filteredLeads"
            ItemsSelector="@( (item, column) => GetColumnForStatus(item.Status) == column )" ItemDropped="LeadUpdated"
            Class="d-flex flex-wrap flex-grow-1" @key="filteredLeads.Count">
            <ChildContent>
                @foreach (var column in new[] { "Yangi Lidlar", "Bog'lanilgan", "Kuzatuvda", "Yakuniy Holat" })
                {
                    <MudPaper Elevation="0"
                        Style="height: calc(100vh - 175px); flex: 1; display: flex; flex-direction: column; min-width: 200px; max-width: 400px; margin-bottom: 8px;"
                        Class="mx-1 transparent rounded-lg">
                        <MudList T="Lead" Style="flex-grow: 1; overflow-y: auto;"
                            Class="d-flex flex-column mud-height-full">
                            <div style="display: flex; justify-content: space-between; padding: 8px;">
                                <MudText Class="ma-2 mt-2" Typo="Typo.subtitle1" Align="Align.Left"
                                    Style="@($"color: {GetColorForColumn(column)};")">
                                    <b>@column</b>
                                </MudText>
                                <MudMenu Icon="@Icons.Material.Rounded.MoreVert" TransformOrigin="Origin.TopRight"
                                    ListClass="d-flex flex-column" PopoverClass="mud-elevation-1">
                                    <MudButton Class="ma-1" Size="Size.Small" Color="Color.Default"
                                        Style="justify-content: flex-start; text-align: left;"
                                        StartIcon="@Icons.Material.Filled.RemoveRedEye" @onclick="ToggleHiddenLeads">
                                        @(showingHiddenLeads ? "Barcha Leadlar" : "Yashirin Leadlar")
                                    </MudButton>
                                </MudMenu>
                            </div>
                            <MudDropZone T="Lead" Identifier="@column" Class="flex-grow-1 overflow-y-auto hide-scrollbar"
                                AllowReorder="true" />
                        </MudList>
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudCard Class="ma-2 rounded-lg mud-card"
                    Style="position:relative; border-top: 1px solid rgb(97, 94, 94);">
                    <div class="left-strip" style="background-color:@GetColorForStatus2(context.Status);"></div>
                    <MudCardContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween"
                            Class="mt-n2">
                            <MudMenu Dense="true" MaxHeight="200">
                                <ActivatorContent>
                                    <MudChip T="string" Variant="Variant.Filled"
                                        Color="@GetColorForStatus(context.Status)" Size="Size.Small"
                                        Style="cursor: pointer;">
                                        @context.Status
                                    </MudChip>
                                </ActivatorContent>
                                <ChildContent>
                                    @foreach (LeadStatus status in Enum.GetValues(typeof(LeadStatus)))
                                    {
                                        <MudMenuItem OnClick="@(() => UpdateLeadStatus(context, status))">@status
                                        </MudMenuItem>
                                    }
                                </ChildContent>
                            </MudMenu>
                            <MudText Typo="Typo.input" Color="Color.Primary" @onclick="() => ShowLeadDetails(context)">
                                @context.Name?.Substring(0, Math.Min(context.Name?.Length ?? 0, 20))</MudText>
                        </MudStack>
                        <MudDivider Class="my-1" />
                        <MudStack Row="true" Class="mt-2">
                            <MudIcon Color="Color.Info" Style="font-size: medium;"
                                Icon="@Icons.Material.Rounded.LocalPhone" />
                            <MudText Typo="Typo.subtitle2" @onclick="() => ShowLeadDetails(context)">
                                @FormatPhoneNumber(context.Phone)</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.caption" Color="Color.Tertiary" Align="Align.Right"
                                @onclick="() => ShowLeadDetails(context)">@(context.ModifiedAt?.ToString("dd MMM yyyy HH:mm") ??
                                context.CreatedAt?.ToString("dd MMM yyyy HH:mm"))
                            </MudText>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </ItemRenderer>
        </MudDropContainer>
    </div>
</MudContainer>

@code {
    private MudDropContainer<Lead> dropContainer = default!;
    private List<Lead> leads = new();
    private List<Course> courses = new();
    private string searchQuery = "";
    private string currentStatus = "Barchasi";
    private List<Lead> filteredLeads = new();
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
        leads = (await LeadService.GetLeadsAsync()).OrderByDescending(l => l.ModifiedAt).ToList();
        filteredLeads = leads.Where(l => !l.IsHidden).ToList();
        courses = (await CourseService.GetCoursesAsync()).ToList();
    }

    private void ShowLeadDetails(Lead lead)
    {
        DialogService.Show<LeadDetailsDialog>("Lead Details", new DialogParameters { ["Lead"] = lead });
    }

    private void OnSearch(string text)
    {
        searchQuery = text.Trim();
        var updatedLeads = leads.Where(l =>
        (string.IsNullOrEmpty(currentStatus) || currentStatus == "Barchasi" || GetColumnForStatus(l.Status) == currentStatus) &&
        (l.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true ||
        l.Phone?.Contains(searchQuery) == true)
        ).ToList();
        filteredLeads.Clear();
        filteredLeads.AddRange(updatedLeads);
    }

    private async Task LeadUpdated(MudItemDropInfo<Lead> dropInfo)
    {
        dropInfo.Item!.Status = GetStatusForColumn(dropInfo.DropzoneIdentifier);
        dropInfo.Item.ModifiedAt = DateTime.Now;
        await LeadService.UpdateLeadAsync(dropInfo.Item);
        leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
        FilterLeads();
        dropContainer.Refresh();
    }
    private async Task UpdateLeadStatus(Lead lead, LeadStatus newStatus)
    {
        lead.Status = newStatus;
        lead.ModifiedAt = DateTime.Now;
        await LeadService.UpdateLeadAsync(lead);
        leads = leads.OrderByDescending(l => l.ModifiedAt).ToList();
        FilterLeads();
        dropContainer.Refresh();
    }

    private string GetColumnForStatus(LeadStatus status)
    {
        return status switch
        {
            LeadStatus.New => "Yangi Lidlar",
            LeadStatus.Phone or LeadStatus.Contacted => "Bog'lanilgan",
            LeadStatus.Recontact or LeadStatus.Incomplete or LeadStatus.Registered or LeadStatus.AttendedTrialLesson => "Kuzatuvda",
            LeadStatus.Acquired or LeadStatus.NotAcquired or LeadStatus.Lost => "Yakuniy Holat",
            _ => "Yangi Lidlar"
        };
    }

    private LeadStatus GetStatusForColumn(string column)
    {
        return column switch
        {
            "Yangi Lidlar" => LeadStatus.New,
            "Bog'lanilgan" => LeadStatus.Contacted,
            "Kuzatuvda" => LeadStatus.Recontact,
            "Yakuniy Holat" => LeadStatus.Acquired,
            _ => LeadStatus.New
        };
    }

    private string GetColorForColumn(string column)
    {
        return column switch
        {
            "Barchasi" => "default",
            "Yangi Lidlar" => "dodgerblue",
            "Bog'lanilgan" => "orange",
            "Kuzatuvda" => "mediumvioletred",
            "Yakuniy Holat" => "seagreen",
            _ => "Barchasi"
        };
    }

    private string GetIconForSource(LeadSource source)
    {
        return source switch
        {
            LeadSource.Telegram => Icons.Custom.Brands.Telegram,
            LeadSource.Instagram => Icons.Custom.Brands.Instagram,
            LeadSource.Referral => Icons.Material.Rounded.PeopleAlt,
            _ => Icons.Material.Filled.Help
        };
    }

    private Color GetColorForStatus(LeadStatus status)
    {
        return status switch
        {
            LeadStatus.New => Color.Info,
            LeadStatus.Phone => Color.Warning,
            LeadStatus.Contacted => Color.Primary,
            LeadStatus.Recontact => Color.Secondary,
            LeadStatus.Incomplete => Color.Error,
            LeadStatus.Registered => Color.Success,
            LeadStatus.AttendedTrialLesson => Color.Tertiary,
            LeadStatus.Acquired => Color.Success,
            LeadStatus.NotAcquired => Color.Error,
            LeadStatus.Lost => Color.Dark,
            _ => Color.Default
        };
    }
    private string GetColorForStatus2(LeadStatus status)
    {
        return status switch
        {
            LeadStatus.New => "#2979FF",
            LeadStatus.Phone => "orange",
            LeadStatus.Contacted => "#7986CB",
            LeadStatus.Recontact => "#E91E63",
            LeadStatus.Incomplete => "#E53935",
            LeadStatus.Registered => "#26A69A",
            LeadStatus.AttendedTrialLesson => "#4DB6AC",
            LeadStatus.Acquired => "#00897B",
            LeadStatus.NotAcquired => "#E53935",
            LeadStatus.Lost => "black",
            _ => "gray"

        };
    }

    public static string FormatPhoneNumber(string? input)
    {
        if (string.IsNullOrEmpty(input))
            return string.Empty;

        var regex = new Regex(@"(\d{2})[\s\-]?(\d{3})[\s\-]?(\d{4})");
        var result = regex.Replace(input, "$1 $2 $3");
        if (result == input)
            return input;
        return result;
    }
    private Course? selectedCourse;
    private LeadSource? selectedLeadSource;
    private List<Lead> hiddenLeads = new();
    private bool showingHiddenLeads = false;

    private async Task ToggleHiddenLeads()
    {
        showingHiddenLeads = !showingHiddenLeads;
        if (showingHiddenLeads)
        {
            hiddenLeads = await LeadService.GetHiddenLeadsAsync();
            filteredLeads = hiddenLeads;
        }
        else
        {
            filteredLeads = leads.Where(l => !l.IsHidden).ToList();
        }
        FilterLeads();
        dropContainer.Refresh();
    }

    private void OnSourceSelected(LeadSource? value)
    {
        selectedLeadSource = value;
        FilterLeads();
    }

    private void OnCourseSelected(Course? value)
    {
        selectedCourse = value;
        FilterLeads();
    }

    private void ClearSourceFilter()
    {
        selectedLeadSource = null;
        FilterLeads();
    }

    private void ClearCourseFilter()
    {
        selectedCourse = null;
        FilterLeads();
    }

    private void FilterLeads()
    {
        ValidateDateRange();
        var leadsToFilter = showingHiddenLeads ? hiddenLeads : leads.Where(l => !l.IsHidden).ToList();

        if (!string.IsNullOrEmpty(searchQuery))
        {
            leadsToFilter = leadsToFilter.Where(l => l.Name!.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (selectedLeadSource.HasValue)
        {
            leadsToFilter = leadsToFilter.Where(l => l.Source == selectedLeadSource.Value).ToList();
        }

        if (selectedCourse != null)
        {
            leadsToFilter = leadsToFilter.Where(l => l.InterestedCourse?.Id == selectedCourse.Id).ToList();
        }


        if (dateRange.Start.HasValue && dateRange.End.HasValue)
        {
            filteredLeads=leadsToFilter.Where(lead => lead.CreatedAt >= dateRange.Start && lead.CreatedAt <= dateRange.End)
                .ToList();
        }


        filteredLeads = leadsToFilter;
        StateHasChanged();
    }

    private void OpenAddLeadDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("OnLeadAdded", EventCallback.Factory.Create<Lead>(this, AddLead));
        DialogService.Show<AddLeadDialog>("Qo'shish Lead", parameters);
    }

    private void AddLead(Lead lead)
    {
        leads.Insert(0, lead);
        FilterLeads();
    }

    private DateRange dateRange { get; set; } = new DateRange(DateTime.Now.AddDays(-7), DateTime.Now);

    private DateTime minDate;
    private DateTime maxDate;
    private MudDateRangePicker picker;

    private void ValidateDateRange()
    {

    }
    private void OnDateRangeChanged(DateRange? newRange)
    {
        ValidateDateRange();
        FilterLeads();
    }
}